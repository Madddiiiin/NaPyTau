{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to NapyTau","text":""},{"location":"#about","title":"About","text":"<p>NapyTau is a Python project, made as a successor to the Napatau tool. It's primary purpose is to calculate <code>Tau</code>, also known as the lifetime. NapyTau primarily aims at modernizing the user experience of the original Napatau tool, by providing a more user-friendly interface and a more modern look. Furthermore, NapyTau provides a command line interface, allowing its usage in automated scripts.</p>"},{"location":"#tech-stack","title":"Tech Stack","text":"<p>The NapyTau source is written entirely in Python, with the GUI being built using the <code>tkinter</code> library. Specifically, the <code>customtk</code> component library is used to provide a more modern look to the GUI. To facilitate efficient calculations, the ubiquitous <code>numpy</code> and <code>scipy</code> libraries are used.</p> <p>The project also provides pre-built binaries for Windows and Linux, which are built using <code>Nuitka</code>.</p> <p>Finally, this documentation is built using <code>mkdocs</code> and <code>mkdocs-material</code>.</p>"},{"location":"#installation","title":"Installation","text":"<p>See ReadMe#Installation for installation instructions.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>See ReadMe#Contributing for information on contributing.</p>"},{"location":"Core/current_issues/","title":"Current Issues &amp; Limitations","text":""},{"location":"Core/current_issues/#current-issues","title":"Current Issues","text":"<p>At the moment the program does not yet calculate the end result correctly. Since most of the functionality was at one point unit tested, the margin for error in how the calculations are implemented is very slim. This suggests that at least one necessary part of the calculation is probably missing. If we look at the old perl code from \"napatau\" this suspicion hardens. The lifetime itself is at least close to the order of magnitude of the expected result but the uncertainty is way off.</p>"},{"location":"Core/current_issues/#hypotheses","title":"Hypotheses","text":"<p>One of the most promising hypotheses is that while \"napytau\" first does the fit and calculates the coefficients on that basis and then optimizes \\(\\tilde{t}^{hyp}\\), \"napatau\" somehow fits and optimizes at the same time. Even though we previously did it similarly, we haven't quite figured out, how \"napatau\" handles this functionality exactly.</p> <p>Another idea is that the scipy library function for the \\(\\chi^{2}\\) minimization does not work as we expect it to. We weren't quite able to verify the behaviour of this function 100%, so there is room for a faulty implementation there.</p> <p>As a third and final starting point for possible bug fixes the fitting itself should be looked at. As we are again relying heavily on library functions it was difficult for us to verify correct behaviour.</p>"},{"location":"Core/file_responsibilities/","title":"File Responsibilities","text":""},{"location":"Core/file_responsibilities/#timepy","title":"time.py","text":"<p>This file contains service functions for the polynomial evaluation. Since the \"DataSet\", that is handed over to the functions in <code>polynomials.py</code>, only contains measuring distances, they have to be converted to times, using the relative velocity. For this step, two functions exist in this file, one to calculate a single time and one to calculate a whole array of times.</p>"},{"location":"Core/file_responsibilities/#polynomialspy","title":"polynomials.py","text":"<p>This file provides two functionalities. The first is to evaluate polynomials at measuring times. One function evaluates a polynomial function directly at given measuring times and the other takes the derivative of a polynomial function and then evaluates it at the given measuring times. The coefficients of the polynomial functions are expected to be provided in increasing order of degree, e.g. the polynomial \\(2x^2+4x+3\\) is expected to be provided as \\([3, 4, 2]\\).</p> <p>The other functionality is to calculate polynomial coefficients. One function just calculates them for the standard fit and the other calculates them for a fit that takes a specific tau factor into account.</p>"},{"location":"Core/file_responsibilities/#chipy","title":"chi.py","text":"<p>This file contains one function to calculate \\(\\chi^{2}\\) via this formula:</p> \\[ \\chi^{2} = \\sum_{i}((\\frac{I^{sh}_{i}-f^{(a_{1}, ..., a_{n})}(t_{i})}{\\Delta I^{sh}_{i}})^2+w(\\frac{I^{us}_{i} - \\tilde{t}^{hyp}\\frac{d}{dt}f^{(a_{1}, ..., a_{n})}(t_{i})}{\\Delta I^{us}_{i}})^2) \\] <p>and another function to optimize the tau factor \\(\\tilde{t}^{hyp}\\) by minimizing \\(\\chi^{2}\\). This optimization is implemented by using the minimize function from \"scipy.optimize\" with the mean of the total possible range of the tau factor as a starting point.</p>"},{"location":"Core/file_responsibilities/#taupy","title":"tau.py","text":"<p>This file provides functionality to calculate the lifetime \\(\\tau_{i}\\) via this formula:</p> <p>$$ \\tau_{i} = \\frac{I^{us}{i}}{\\frac{d}{dt}f^{opt}(t{i})} $$ with \\(f^{opt}(t_{i})\\) being the fit function for the optimal \\(\\tilde{t}^{hyp}\\), i.e. \\(\\tilde{t}^{opt}\\).</p>"},{"location":"Core/file_responsibilities/#delta_taupy","title":"delta_tau.py","text":"<p>Here we handle the error calculation for \\(\\Delta\\tau_{i}^{2}\\). It follows this formula: $$ \\Delta\\tau_{i}^{2} = \\frac{\\Delta I^{us2}{i}}{\\dot{P}^{2}{j(i)}} + \\frac{I^{us2}{i}}{\\dot{P}^{4}{j(i)}} \\Delta\\dot{P}^{2}{j(i)} + \\frac{I^{us}{i}\\tilde{t}}{\\dot{P}^{3}{j(i)}} \\Delta\\dot{P}^2{j(i)} $$ As a part of the error calculation we also need the covariance matrix, for the calculation of which a function is provided.</p>"},{"location":"Core/file_responsibilities/#tau_finalpy","title":"tau_final.py","text":"<p>This file merges the lifetime \\(\\tau_{i}\\) and the error \\(\\Delta\\tau_{i}\\) to calculate the weighted mean \\(\\tau_{final}\\).</p>"},{"location":"Core/file_responsibilities/#corepy","title":"core.py","text":"<p>This file acts as an interface to the other modules. It provides three functions that are intended to be called by the GUI and Headless modules for the tau factor and lifetime calculations.</p> <p>The \"calculate_lifetime_for_fit\" function automatically fits the function for the default tau factor and calculates the polynomial coefficients for that fit. It then calculates and returns the corresponding lifetime.</p> <p>The \"calculate_optimal_tau_factor\" function also fits the function and calculates the polynomial coefficients and then calculates the optimal tau factor for this fit.</p> <p>The \"calculate_lifetime_for_custom_tau_factor\" function directly calculates the polynomial coefficients for a custom tau factor that can be set via the slider in the GUI, without fitting. It then uses this polynomial to calculate the lifetime.</p>"},{"location":"Core/general/","title":"General","text":"<p>The Core-module handles the mathematical logic and implementation of the underlying physical formulas. It is structured into several different collections of helper-methods. Each of these files either handles an abstraction layer of the physical calculation or functionality for an explicit mathematical construct, like polynomial functions. The exact responsibility for each of them can be found in <code>file_responsibilities</code>.</p> <p>Overall, the goal is to calculate the lifetime \\(\\tau_{final}\\) via the weighted mean of \\(\\tau_{i}\\) and \\(\\Delta\\tau_{i}\\). For a more in depth explanation of the physical background, please look at the <code>napatau manual</code>.</p>"},{"location":"Import%26Export/general/","title":"General","text":"<p>The Import&amp;Export module serves as a dedicated service module within the system. Its primary responsibility is to facilitate the seamless handling of experiment-related data by providing functionality for both importing and exporting datasets. Specifically, the module is responsible for reading and processing previously stored experimental data (import) and for saving computed results along with their associated datasets (export).</p> <p>A key design principle of the Import&amp;Export module is modularity. To achieve this, the module defines a common internal representation of all relevant information. Any imported data is transformed into this unified format before being made available to other parts of the system. This ensures that all system components operate on a consistent and standardized set of data structures, eliminating the need for each module to handle multiple formats or perform individual data conversions.</p> <p>Given this central role in data standardization, any modifications or refactoring of the data structures within the Import&amp;Export module should be approached with caution. Changes to these structures can have a system-wide impact, potentially affecting all modules that rely on the standardized data representation. Therefore, careful consideration should be given before making structural adjustments to ensure compatibility and maintainability across the system.</p>"},{"location":"Import%26Export/components/crawler/","title":"Crawler","text":"<p>The Crawler component is responsible for discovering data sources within a given scope. Subclasses of the crawler implement the logic required to traverse a defined starting point and identify valid data sources that can be used for import. This makes crawlers particularly useful when dealing with datasets that are distributed across multiple locations or systems.</p> <p>While a crawler is a powerful tool for automating data source discovery, it is not strictly required for every import process. In cases where data sources are explicitly known and provided, a crawler may be unnecessary. However, when working with large-scale or distributed datasets, a crawler can significantly simplify and streamline the import process by reducing the need for manual source identification.</p>"},{"location":"Import%26Export/components/factory/","title":"Factory","text":"<p>The Factory submodule is responsible for handling the conversion of various supported data formats from their raw text representations into the system\u2019s common internal data model. This transformation ensures that all imported data adheres to a unified structure, making it compatible with the rest of the system.</p> <p>Each factory within this submodule is designed to:</p> <p>Define the expected structure of its respective raw data format. Validate that the provided data conforms to these expectations before processing. Transform the validated data into the standardized internal representation. By enforcing these constraints, the factory ensures that all imported datasets are correctly structured and ready for further processing by other modules.</p> <p>Additionally, each factory must be capable of incorporating separately stored setup data into an already created dataset. This allows for incremental data enrichment, where additional configuration or metadata can be merged with existing datasets to provide a complete and accurate representation.</p>"},{"location":"Import%26Export/components/reader/","title":"Reader","text":"<p>The Reader component serves as an abstraction layer for accessing data from various sources. Each specific type of reader is implemented as a subclass, tailored to handle a particular data source type. These subclasses encapsulate the logic required to retrieve and process data, ensuring a structured and uniform approach to data acquisition.</p> <p>A reader's primary responsibility is to define how a given data source is identified and to provide a facade over the underlying data-fetching implementation. This abstraction simplifies data access for other modules, shielding them from the complexities of direct interaction with different storage formats or retrieval mechanisms.</p> <p>It is important to note that the reader itself is not responsible for locating the data source. The system must supply the necessary reference or connection details, allowing the reader to focus solely on extracting and transforming the data as needed.</p>"},{"location":"Import%26Export/model/datapoint/","title":"Datapoint","text":"<p>The <code>Datapoint</code> class represents a single measurement taken during the course of an experiment. Each datapoint is uniquely identified by the distance it was measured at. The datapoint should always contain the following information:</p> Name Description Type of data <code>distance</code> The distance this datapoint was measured at floating point number with error <code>calibration</code> The calibration of this datapoint floating point number with error <code>shifted_intensity</code> The shifted intensity measured at this datapoint floating point number with error <code>unshifted_intensity</code> The unshifted intensity measured at this datapoint floating point number with error <code>active</code> Indicates if this datapoint should be considered during calculation boolean <p>It may also contain the following information, depending on the input data and the state of calculation:</p> Name Description Type of data <code>feeding_shifted_intensity</code> The feeding shifted intensity measured at this datapoint floating point number with error <code>feeding_unshifted_intensity</code> The feeding unshifted intensity measured at this datapoint floating point number with error <code>tau</code> The tau value calculated for this datapoint floating point number with error"},{"location":"Import%26Export/model/datapoint_collection/","title":"Datapoint Collection","text":"<p>The <code>DatapointCollection</code> class is a collection of <code>Datapoint</code> objects. It is a wrapper around a list of datapoints. It provides convenience methods for working with datapoints. It is indexed by the distance of the datapoints, as this uniquely identifies a datapoint. It also provides functionality one would expect from a collection, such as iteration, length, and indexing.</p>"},{"location":"Import%26Export/model/dataset/","title":"Dataset","text":"<p>The <code>Dataset</code> class represents the top-level container for experimental data within the system. It encapsulates all relevant information associated with an experiment. This includes the following:</p>"},{"location":"Import%26Export/model/dataset/#relative-velocity","title":"Relative velocity","text":"<p>The relative velocity the particles were moving at during the experiment.</p>"},{"location":"Import%26Export/model/dataset/#datapoints","title":"Datapoints","text":"<p>All datapoints collected during the experiment.</p>"},{"location":"Import%26Export/model/dataset/#tau-factor","title":"Tau factor","text":"<p>The tau factor used during the calculation process. This may be set using the GUI or read from setup data.</p>"},{"location":"Import%26Export/model/dataset/#weighted-mean-tau","title":"Weighted Mean Tau","text":"<p>The result of the calculation process. This is the weighted mean tau value for the experiment.</p>"},{"location":"Import%26Export/model/dataset/#sampling-points","title":"Sampling Points","text":"<p>A list of sampling points used to split up the datapoints into smaller groups for calculation. A polynomial fit is performed on each group to calculate the tau value.</p>"},{"location":"Import%26Export/model/dataset/#polynomial-count","title":"Polynomial Count","text":"<p>The amount of polynomials used to fit the datapoints. This can be set using the GUI or read from setup data. It determines the number of sampling points used in the calculation process.</p>"},{"location":"Import%26Export/model/dataset/#polynomials","title":"Polynomials","text":"<p>A list of polynomials fit to the datapoints. These are used to calculate the tau value the experiment.</p>"},{"location":"Import%26Export/model/error_value_pair/","title":"Error Value Pair","text":"<p>The error value pair encapsulates a given datatype, representing a value with an associated error. It also provides the functionality to perform a comparison between two error value pairs using the <code>=</code> operator.</p>"},{"location":"Import%26Export/model/polynomial/","title":"Polynomial","text":"<p>The <code>Polynomial</code> class represents a polynomial function. It is used to store the coefficients of a polynomial function and to evaluate the function at a given point. Coefficients are stored as a list of floating point numbers. These are ordered from the highest degree to the lowest degree. The degree of the polynomial is determined by the length of the coefficient list minus one, we currently expect it to be 2.</p>"},{"location":"Import%26Export/model/relative_velocity/","title":"Relative Velocity","text":"<p>The <code>Relative Velocity</code> class is a wrapper around a floating point value. It restricts the value to be in the range of 0 to 1. It is used to represent the velocity of particles measured in the experiment relative to lightspeed. The class also provides the functionality to be compared to another relative velocity using the <code>=</code> operator.</p>"},{"location":"gui/App/","title":"App","text":""},{"location":"gui/App/#overview","title":"Overview","text":"<p>The \"App\" Class is an extension of the customtkinter.Ctk class and as such represents the main window of the application, containing all GUI Components in an ordered Grid. </p> <p>When Napytau is started and the entry point is executed in Gui-Mode, initializing an instance of the App Class is the first and only thing it will do.</p> <p>When initialized the App will sequentially call the constructors off all needed GUI-Components and build the Application.</p>"},{"location":"gui/App/#attributes","title":"Attributes","text":""},{"location":"gui/App/#datapoint-collections-managing-data","title":"Datapoint Collections (Managing Data)","text":""},{"location":"gui/App/#datapoints","title":"<code>datapoints</code>","text":"<p>Stores all loaded datapoints used in the application.</p>"},{"location":"gui/App/#datapoints_for_fitting","title":"<code>datapoints_for_fitting</code>","text":"<p>Stores datapoints which should specifically be used for fitting calculations.</p>"},{"location":"gui/App/#datapoints_for_calculation","title":"<code>datapoints_for_calculation</code>","text":"<p>Stores datapoints that should be used when doing general calculations.</p>"},{"location":"gui/App/#tkinter-variables","title":"Tkinter Variables","text":""},{"location":"gui/App/#tau","title":"<code>tau</code>","text":"<p>Variable dynamically containing the latest result of the tau calculation. </p>"},{"location":"gui/App/#grid-layout-configuration-gui-layout","title":"Grid Layout Configuration (GUI Layout)","text":""},{"location":"gui/App/#grid_rowconfigure","title":"<code>grid_rowconfigure</code>","text":"<p>Defines the row height proportions for the layout: - Row 0: Weight = 3, minimum size = <code>3 * height // total_height</code> - Row 1: Weight = 3, minimum size = <code>3 * height // total_height - 30</code> - Row 2: Weight = 2, minimum size = <code>2 * height // total_height</code></p>"},{"location":"gui/App/#grid_columnconfigure","title":"<code>grid_columnconfigure</code>","text":"<p>Defines the column width proportions: - Column 0: Weight = 2, minimum size = <code>3 * width // total_width - 30</code> - Column 1: Weight = 1, minimum size = <code>1 * width // total_width</code></p>"},{"location":"gui/App/#menu-bar-navigation-settings","title":"Menu Bar (Navigation &amp; Settings)","text":""},{"location":"gui/App/#menu_bar-menubar","title":"<code>menu_bar: MenuBar</code>","text":"<p>Initializes a Menu Bar component with callback functions for: - Opening/Saving files - Quitting the application - Changing themes and settings</p>"},{"location":"gui/App/#checkbox-panel-data-selection","title":"Checkbox Panel (Data Selection)","text":""},{"location":"gui/App/#checkbox_panel","title":"<code>checkbox_panel</code>","text":"<p>Creates a Checkbox Panel for selecting data points interactively.</p>"},{"location":"gui/App/#update_data_checkboxes","title":"<code>update_data_checkboxes</code>","text":"<p>Updates the datapoint for the gui and updates both columns of the data checkboxes. Call this method if there are new datapoints.</p>"},{"location":"gui/App/#graph-plotting-data","title":"Graph (Plotting Data)","text":""},{"location":"gui/App/#graph","title":"<code>graph</code>","text":"<p>Initializes a Graph Component for visualizing data in a plot.</p>"},{"location":"gui/App/#toolbar-graph-controls","title":"Toolbar (Graph Controls)","text":""},{"location":"gui/App/#toolbar","title":"<code>toolbar</code>","text":"<p>Creates a Toolbar to allow users to interact with the graph (zoom, pan, reset, etc.).</p>"},{"location":"gui/App/#control-panel-user-inputs","title":"Control Panel (User Inputs)","text":""},{"location":"gui/App/#control_panel","title":"<code>control_panel</code>","text":"<p>Initializes a Control Panel for adjusting parameters and user inputs.</p>"},{"location":"gui/App/#logger-message-logging","title":"Logger (Message Logging)","text":""},{"location":"gui/App/#logger","title":"<code>logger</code>","text":"<p>Creates a Logger Component to display system messages, errors, and logs to the user.</p>"},{"location":"gui/App/#table-of-main-attributes","title":"Table of Main Attributes","text":"Attribute Purpose <code>datapoints</code>, <code>datapoints_for_fitting</code>, <code>datapoints_for_calculation</code> Stores and manages datapoint collections. <code>tau</code> Stores a numerical value (Tkinter variable). <code>menu_bar</code> Handles file operations and settings. <code>checkbox_panel</code> Allows users to select datapoints. <code>graph</code>, <code>toolbar</code> Displays and interacts with plotted data. <code>control_panel</code> Manages user controls and configurations. <code>logger</code> Displays logs, messages, and status updates."},{"location":"gui/App/#methods","title":"Methods","text":""},{"location":"gui/App/#open_file","title":"<code>open_file</code>","text":"<p>Opens the file explorer and allows the user to choose a file. Logs the chosen file path.</p>"},{"location":"gui/App/#save_file","title":"<code>save_file</code>","text":"<p>Saves the file and logs a success message.</p>"},{"location":"gui/App/#read_setup","title":"<code>read_setup</code>","text":"<p>Reads the setup and logs a message (currently not implemented).</p>"},{"location":"gui/App/#quit","title":"<code>quit</code>","text":"<p>Closes the application.</p>"},{"location":"gui/App/#change_appearance_mode","title":"<code>change_appearance_mode</code>","text":"<p>Changes the application's appearance mode and updates the logger appearance.</p>"},{"location":"gui/App/#select_number_of_polynomials","title":"<code>select_number_of_polynomials</code>","text":"<p>Logs the selected number of polynomials (currently not implemented).</p>"},{"location":"gui/App/#select_polynomial_mode","title":"<code>select_polynomial_mode</code>","text":"<p>Logs the selected polynomial mode (currently not implemented).</p>"},{"location":"gui/App/#select_alpha_calc_mode","title":"<code>select_alpha_calc_mode</code>","text":"<p>Logs the selected alpha calculation mode (currently not implemented).</p>"},{"location":"gui/App/#update_data_checkboxes_1","title":"<code>update_data_checkboxes</code>","text":"<p>Updates the datapoint collection for the GUI and refreshes the checkbox panels.</p>"},{"location":"gui/App/#table-of-main-functions","title":"Table of Main Functions","text":"Method Purpose <code>open_file()</code>, <code>save_file()</code>, <code>read_file</code> Handles file operations. <code>change_appearance_mode()</code> Updates the application's appearance mode. <code>select_number_of_polynomials()</code>, <code>select_polynomial_mode()</code>, <code>select_alpha_calc_mode()</code> Logs selections for various settings. <code>update_data_checkboxes(new_datapoints)</code> Updates GUI data checkboxes with new datapoints."},{"location":"gui/CheckboxPanel/","title":"Checkbox Panel","text":""},{"location":"gui/CheckboxPanel/#overview","title":"Overview","text":"<p>The <code>CheckboxPanel</code> class is responsible for  managing a panel of checkboxes used to select  data points for fitting and calculations. It is  implemented using <code>customtkinter</code> and is embedded  in a parent GUI application.</p>"},{"location":"gui/CheckboxPanel/#initialization","title":"Initialization","text":"<p>Initializes the <code>CheckboxPanel</code> by creating a scrollable frame to host the checkboxes.</p>"},{"location":"gui/CheckboxPanel/#parameters","title":"Parameters:","text":"<ul> <li><code>parent</code>: The parent application where the panel is hosted.</li> </ul>"},{"location":"gui/CheckboxPanel/#methods","title":"Methods","text":""},{"location":"gui/CheckboxPanel/#update_data_checkboxes_fitting","title":"<code>update_data_checkboxes_fitting</code>","text":"<p>Updates the checkboxes corresponding to data  points available for fitting. This method  clears any existing checkboxes and repopulates  them with the latest data points.</p>"},{"location":"gui/CheckboxPanel/#_data_checkbox_fitting_event-private","title":"<code>_data_checkbox_fitting_event (private)</code>","text":"<p>Handles checkbox state changes for fitting data points. </p>"},{"location":"gui/CheckboxPanel/#parameters_1","title":"Parameters:","text":"<ul> <li><code>index</code> : The index of the selected data checkbox.</li> </ul>"},{"location":"gui/CheckboxPanel/#discription","title":"Discription","text":"<p>When pressing a checkbox: - The active state of the corresponding data point is toggled. - Activation or deactivation of the checkbox is logged. - Graph is updated.</p>"},{"location":"gui/CheckboxPanel/#update_data_checkboxes_calculation","title":"<code>update_data_checkboxes_calculation</code>","text":"<p>Updates the checkboxes corresponding to data  points used for calculating tau and delta-tau.  This method clears old checkboxes and adds new ones.  This method is currently not actively used in the napytau version, since checkboxes for datapoint calculations are not currently implemented.</p>"},{"location":"gui/CheckboxPanel/#discription_1","title":"Discription:","text":"<ul> <li>Removes existing checkboxes in column 1.</li> <li>Adds a header label: \"Tau calculation\".</li> <li>Creates and places checkboxes for each data point.</li> <li>Each checkbox toggles the active state of a datapoint when clicked.</li> </ul>"},{"location":"gui/CheckboxPanel/#_data_checkbox_calculation_event-private","title":"<code>_data_checkbox_calculation_event (private)</code>","text":"<p>Handles checkbox state changes for data points used in tau calculations.</p>"},{"location":"gui/CheckboxPanel/#parameters_2","title":"Parameters:","text":"<ul> <li><code>index</code> (<code>int</code>): The index of the selected data checkbox.</li> </ul>"},{"location":"gui/CheckboxPanel/#discription_2","title":"Discription:","text":"<p>When pressed: - Toggles the active state of the corresponding data point. - Logs activation or deactivation of the checkbox.</p>"},{"location":"gui/CheckboxPanel/#notes","title":"Notes","text":"<ul> <li>This class dynamically updates its UI elements based on the data points available in <code>self.parent.datapoints</code>.</li> </ul>"},{"location":"gui/CheckboxPanel/#example-usage","title":"Example Usage","text":"<pre><code>parent_app = App()\ncheckbox_panel = CheckboxPanel(parent_app)\ncheckbox_panel.update_data_checkboxes_fitting(&lt;Random Datapoint&gt;)\ncheckbox_panel.update_data_checkboxes_calculation(&lt;Random Datapoint&gt;)\n</code></pre> <p>This will create a <code>CheckboxPanel</code>, attach it to the <code>parent_app</code>, and update checkboxes for both fitting and calculation.</p>"},{"location":"gui/ControlPanel/","title":"Control Panel","text":""},{"location":"gui/ControlPanel/#overview","title":"Overview","text":"<p>The <code>ControlPanel</code> class is a GUI component designed to provide various controls such as timescale input, buttons for minimizing chi-squared, calculating tau and absolute tau, and displaying results. It is implemented using <code>customtkinter</code> and is embedded in a parent GUI application.</p>"},{"location":"gui/ControlPanel/#initialization","title":"Initialization","text":"<p>Initializes the <code>ControlPanel</code> by creating a structured control interface with various widgets.</p>"},{"location":"gui/ControlPanel/#parameters","title":"Parameters:","text":"<ul> <li><code>parent</code>: The parent application where the control panel is hosted.</li> </ul>"},{"location":"gui/ControlPanel/#methods","title":"Methods","text":""},{"location":"gui/ControlPanel/#_create_timescale_widget-private","title":"<code>_create_timescale_widget (private)</code>","text":""},{"location":"gui/ControlPanel/#description","title":"Description","text":"<p>The <code>_create_timescale_widget</code> method creates a timescale control widget that allows users to adjust the timescale value using a slider, an entry field, and buttons for fine adjustments. The widget also updates the calculated lifetime values based on the selected timescale.</p>"},{"location":"gui/ControlPanel/#returns","title":"Returns","text":"<ul> <li><code>customtkinter.CTkFrame</code>: A frame containing the timescale adjustment controls.</li> </ul>"},{"location":"gui/ControlPanel/#widget-components","title":"Widget Components","text":"<p>The method creates a <code>CTkFrame</code> containing: 1. Update Button (<code>t [ps]</code>)    - Triggers the <code>update_timescale</code> function to validate and apply the entered timescale value.</p> <ol> <li>Increment &amp; Decrement Buttons (<code>+0.1[ps]</code>, <code>-0.1[ps]</code>) </li> <li> <p>Allows fine adjustment of the timescale by \u00b10.1 ps.</p> </li> <li> <p>Entry Field </p> </li> <li> <p>Displays and allows direct input of the timescale value.</p> </li> <li> <p>Slider </p> </li> <li>Provides a graphical way to set the timescale within a valid range.</li> </ol>"},{"location":"gui/ControlPanel/#internal-functions","title":"Internal Functions","text":""},{"location":"gui/ControlPanel/#update_timescale","title":"<code>update_timescale</code>","text":"<ul> <li>Reads the value from the entry field and validates it.</li> <li>Updates the <code>timescale</code> variable if the value is within the allowed range (<code>0.01 - 100.0</code> ps).</li> <li>Calls <code>calculate_lifetime_for_custom_tau_factor</code> to compute the lifetime (<code>\u03c4</code>) and its error (<code>\u0394\u03c4</code>).</li> <li>Updates the displayed <code>\u03c4</code> and <code>\u0394\u03c4</code> values.</li> <li>Logs success or error messages.</li> </ul>"},{"location":"gui/ControlPanel/#sync_slider","title":"<code>sync_slider</code>","text":"<ul> <li>Syncs the slider position with the entry field.</li> <li>Recalculates and updates the lifetime (<code>\u03c4</code>) and error (<code>\u0394\u03c4</code>).</li> </ul>"},{"location":"gui/ControlPanel/#add_on_tau_factor","title":"<code>add_on_tau_factor</code>","text":"<ul> <li>Increases or decreases the timescale by <code>0.1</code> ps, ensuring it does not go below <code>0.0</code>.</li> </ul>"},{"location":"gui/ControlPanel/#layout-configuration","title":"Layout Configuration","text":"<ul> <li>The frame uses a grid layout with four columns:</li> <li>Column 0: \"t [ps]\" button</li> <li>Column 1: \"+0.1[ps]\" button</li> <li>Column 2: \"-0.1[ps]\" button</li> <li>Column 3: Entry field (given more weight for a larger size)</li> <li>The slider spans all four columns.</li> </ul>"},{"location":"gui/ControlPanel/#usage","title":"Usage","text":"<p>This widget allows users to: - Manually enter a timescale value. - Adjust the timescale using buttons or a slider. - View the updated <code>\u03c4</code> and <code>\u0394\u03c4</code> values in real-time.</p>"},{"location":"gui/ControlPanel/#_create_chi_squared_widget-private","title":"`_create_chi_squared_widget (private)","text":""},{"location":"gui/ControlPanel/#description_1","title":"Description","text":"<p>Creates a widget displaying the chi-squared value and a button to minimize chi-squared.</p>"},{"location":"gui/ControlPanel/#returns_1","title":"Returns","text":"<ul> <li><code>customtkinter.CTkFrame</code>: A frame containing the chi-squared controls.</li> </ul>"},{"location":"gui/ControlPanel/#functionality","title":"Functionality","text":"<ul> <li>Displays a \"Minimize\" button that triggers chi-squared minimization.</li> <li>Shows the current chi-squared value in a label.</li> </ul>"},{"location":"gui/ControlPanel/#_create_tau_widget-private","title":"<code>_create_tau_widget (private)</code>","text":""},{"location":"gui/ControlPanel/#description_2","title":"Description","text":"<p>The <code>_create_tau_widget</code> method creates a graphical widget for displaying the calculated lifetime (<code>\u03c4</code>) and its associated error (<code>\u0394\u03c4</code>). The widget also includes an absolute time difference (<code>|\u03c4 - t|</code>) display and a button for recalculating these values.</p>"},{"location":"gui/ControlPanel/#returns_2","title":"Returns","text":"<ul> <li><code>customtkinter.CTkFrame</code>: A frame containing all UI elements related to <code>\u03c4</code> and <code>\u0394\u03c4</code> values.</li> </ul>"},{"location":"gui/ControlPanel/#widget-components_1","title":"Widget Components","text":"<p>This method constructs a main frame with a secondary frame inside it:</p>"},{"location":"gui/ControlPanel/#main-frame-ctkframe","title":"Main Frame (<code>CTkFrame</code>)","text":"<ol> <li>Button (<code>\u03c4 \u00b1 \u0394\u03c4 [ps]</code>)</li> <li> <p>Calls <code>_tau_button_event(0.0, 0.0)</code> to update the values.</p> </li> <li> <p>Label (<code>|\u03c4 - t| [ps]:</code>)</p> </li> <li> <p>Displays the absolute difference between <code>\u03c4</code> and <code>t</code>.</p> </li> <li> <p>Read-Only Entry (<code>|\u03c4 - t|</code> Value)</p> </li> <li>Shows the absolute difference value stored in <code>self.result_absolute_tau_t</code>.</li> </ol>"},{"location":"gui/ControlPanel/#secondary-frame-ctkframe-within-main-frame","title":"Secondary Frame (<code>CTkFrame</code> within Main Frame)","text":"<ol> <li>Read-Only Entry (<code>\u03c4</code> Value)</li> <li> <p>Displays the calculated <code>\u03c4</code>, retrieved from <code>self.result_tau</code>.</p> </li> <li> <p>Separator (<code>\u00b1</code>)</p> </li> <li> <p>Visually separates <code>\u03c4</code> and <code>\u0394\u03c4</code>.</p> </li> <li> <p>Read-Only Entry (<code>\u0394\u03c4</code> Value)</p> </li> <li>Displays the error <code>\u0394\u03c4</code>, retrieved from <code>self.result_tau_error</code>.</li> </ol>"},{"location":"gui/ControlPanel/#internal-layout-configuration","title":"Internal Layout Configuration","text":"<ul> <li>The main frame:</li> <li>Expands column <code>2</code> to ensure proper resizing.</li> <li> <p>Uses grid layout for structured positioning.</p> </li> <li> <p>The secondary frame:</p> </li> <li>Expands columns <code>0</code> and <code>2</code> for balanced spacing.</li> <li>Also uses grid layout.</li> </ul>"},{"location":"gui/ControlPanel/#_create_absolute_tau_t_widget-private","title":"<code>_create_absolute_tau_t_widget (private)</code>","text":""},{"location":"gui/ControlPanel/#description_3","title":"Description","text":"<p>Creates a widget for displaying the absolute difference between tau and t.</p>"},{"location":"gui/ControlPanel/#returns_3","title":"Returns","text":"<ul> <li><code>customtkinter.CTkFrame</code>: A frame containing absolute tau-related controls.</li> </ul>"},{"location":"gui/ControlPanel/#functionality_1","title":"Functionality","text":"<ul> <li>Includes a button labeled \"Absolute \u03c4\" to trigger absolute tau calculation.</li> <li>Displays the calculated absolute tau value in a label.</li> </ul>"},{"location":"gui/ControlPanel/#_timescale_button_event-private","title":"<code>_timescale_button_event (private)</code>","text":"<p>Handles events when the timescale button is clicked, printing the selected timescale value.</p>"},{"location":"gui/ControlPanel/#_timescale_slider_event-private","title":"<code>_timescale_slider_event (private)</code>","text":"<p>Handles events when the timescale slider is moved. Set timescale value to given value.</p>"},{"location":"gui/ControlPanel/#parameters_1","title":"Parameters:","text":"<ul> <li><code>value</code> : The current value of the slider.</li> </ul>"},{"location":"gui/ControlPanel/#_tau_button_event-private","title":"<code>_tau_button_event (private)</code>","text":"<p>Handles events when the tau calculation button is clicked. Sets tau value to given value.</p>"},{"location":"gui/ControlPanel/#_chi_squared_button_event-private","title":"<code>_chi_squared_button_event (private)</code>","text":"<p>Handles events when the chi-squared button is clicked. Sets chi-squared value to calculated value.</p>"},{"location":"gui/ControlPanel/#_absolute_tau_button_event-private","title":"<code>_absolute_tau_button_event (private)</code>","text":"<p>Handles events when the absolute tau calculation button is clicked. Sets the absolute tau value to calculated value.</p>"},{"location":"gui/ControlPanel/#set_result_chi_squared-private","title":"<code>set_result_chi_squared (private)</code>","text":"<p>Sets the chi-squared result value.</p>"},{"location":"gui/ControlPanel/#parameters_2","title":"Parameters:","text":"<ul> <li><code>chi_squared</code>: The new value for chi-squared.</li> </ul>"},{"location":"gui/ControlPanel/#set_result_tau","title":"<code>set_result_tau</code>","text":"<p>Sets the tau result value.</p>"},{"location":"gui/ControlPanel/#parameters_3","title":"Parameters:","text":"<ul> <li><code>tau</code> : The new value for tau.</li> </ul>"},{"location":"gui/ControlPanel/#set_result_tau_error","title":"<code>set_result_tau_error</code>","text":"<p>Sets the tau error result value.</p>"},{"location":"gui/ControlPanel/#parameters_4","title":"Parameters:","text":"<ul> <li><code>tau_error</code> : The new value for tau error.</li> </ul>"},{"location":"gui/ControlPanel/#set_result_absolute_tau_t","title":"<code>set_result_absolute_tau_t</code>","text":"<p>Sets the absolute tau result value.</p>"},{"location":"gui/ControlPanel/#parameters_5","title":"Parameters:","text":"<ul> <li><code>absolute_tau_t</code> : The new value for absolute tau.</li> </ul>"},{"location":"gui/ControlPanel/#dependencies","title":"Dependencies","text":"<ul> <li><code>customtkinter</code>: Used for creating UI elements.</li> <li><code>napytau.gui.model.log_message_type.LogMessageType</code>: Used for logging messages.</li> <li><code>napytau.gui.app.App</code>: The parent application where the control panel is embedded.</li> </ul> <p>```</p>"},{"location":"gui/Graph/","title":"Graph","text":""},{"location":"gui/Graph/#overview","title":"Overview","text":"<p>The <code>Graph</code> class is responsible for rendering and updating a graphical representation of <code>datapoints</code> in the NaPyTau application. It utilizes <code>matplotlib</code> to create plots and integrates with <code>tkinter</code> via <code>FigureCanvasTkAgg</code>.</p> <p>When constructed the <code>App</code> instance will give itself as a parent to the Graph. The Graph component can access the needed datapoints and other Attributes from this parent reference.</p> <p>The <code>Graph</code> class is used within the <code>App</code> to render data visualizations. It updates dynamically based on user interactions and selected appearance modes.</p>"},{"location":"gui/Graph/#attributes","title":"Attributes","text":""},{"location":"gui/Graph/#parent","title":"<code>parent</code>","text":"<p>Reference to the parent application instance.</p>"},{"location":"gui/Graph/#graph_frame","title":"<code>graph_frame</code>","text":"<p>The main canvas widget where the graph is displayed.</p>"},{"location":"gui/Graph/#canvas","title":"<code>canvas</code>","text":"<p>A tkinter-compatible Matplotlib figure canvas containing the graph.</p>"},{"location":"gui/Graph/#main_color","title":"<code>main_color</code>","text":"<p>The primary background color for the graph, adapting to appearance mode.</p>"},{"location":"gui/Graph/#secondary_color","title":"<code>secondary_color</code>","text":"<p>The secondary color used for elements like grid lines and ticks.</p>"},{"location":"gui/Graph/#main_marker_color","title":"<code>main_marker_color</code>","text":"<p>The primary color used for markers on the graph.</p>"},{"location":"gui/Graph/#secondary_marker_color","title":"<code>secondary_marker_color</code>","text":"<p>The secondary color used for markers on the graph.</p>"},{"location":"gui/Graph/#table-of-attributes","title":"Table of Attributes","text":"Attribute Description <code>parent</code> Reference to the parent application instance. <code>graph_frame</code> The main canvas widget where the graph is displayed. <code>canvas</code> A tkinter-compatible Matplotlib figure canvas containing the graph. <code>main_color</code>, <code>secondary_color</code>, <code>main_marker_color</code>, <code>secondary_marker_color</code> Attributes used for coloring"},{"location":"gui/Graph/#methods","title":"Methods","text":""},{"location":"gui/Graph/#plot","title":"<code>plot</code>","text":"<ul> <li>Description: Creates and configures the Matplotlib figure and axes based on the provided appearance mode.</li> <li>Returns: <code>Canvas</code> widget containing the plotted figure.</li> </ul>"},{"location":"gui/Graph/#update_plot","title":"<code>update_plot</code>","text":"<ul> <li>Description: Re-renders the graph and updates the toolbar.</li> </ul>"},{"location":"gui/Graph/#set_colors","title":"<code>set_colors</code>","text":"<ul> <li>Description: Adjusts color settings based on the current appearance mode.</li> </ul>"},{"location":"gui/Graph/#apply_coloring","title":"<code>apply_coloring</code>","text":"<ul> <li>Description: Applies the selected color scheme to the figure and axes.</li> </ul>"},{"location":"gui/Graph/#plot_markers","title":"<code>plot_markers</code>","text":"<ul> <li>Description: Plots data points with appropriate markers based on their error values.</li> </ul>"},{"location":"gui/Graph/#plot_fitting_curve","title":"<code>plot_fitting_curve</code>","text":"<ul> <li>Description: Generates and plots a polynomial fitting curve for the selected data points.</li> </ul>"},{"location":"gui/Graph/#plot_derivative_curve","title":"`plot_derivative_curve","text":"<ul> <li>Description: Generates and plots the derivative of the polynomial fitting curve for the selected data points.</li> </ul>"},{"location":"gui/Logger/","title":"Logger","text":""},{"location":"gui/Logger/#overview","title":"Overview","text":"<p>The <code>Logger</code> class provides a scrolling text box for displaying log messages with different message types, including informational, error, and success messages. It is designed to store and display up to 50 messages at a time.</p>"},{"location":"gui/Logger/#attributes","title":"Attributes","text":"<ul> <li><code>parent</code> (<code>App</code>): The parent widget that contains the logger.</li> <li><code>scrollable_frame</code> (<code>customtkinter.CTkScrollableFrame</code>): A scrollable frame that holds the log messages.</li> <li><code>info_color</code> (<code>str</code>): The color used for informational messages.</li> <li><code>error_color</code> (<code>str</code>): The color used for error messages.</li> <li><code>success_color</code> (<code>str</code>): The color used for success messages.</li> <li><code>labels</code> (<code>deque</code>): A deque (double-ended queue) storing the last 50 log messages for efficient management.</li> </ul>"},{"location":"gui/Logger/#methods","title":"Methods","text":""},{"location":"gui/Logger/#__init__","title":"<code>__init__</code>","text":"<p>Initializes the <code>Logger</code> widget.</p>"},{"location":"gui/Logger/#parameters","title":"Parameters","text":"<ul> <li><code>parent</code>: The parent widget where the logger will be placed.</li> </ul>"},{"location":"gui/Logger/#description","title":"Description","text":"<ul> <li>Creates a frame with a scrollable area for log messages.</li> <li>Initializes text colors based on the current appearance mode (light or dark).</li> <li>Stores messages in a <code>deque</code> for efficient message handling.</li> </ul>"},{"location":"gui/Logger/#log_message","title":"<code>log_message</code>","text":"<p>Logs a new message in the logger frame and scrolls to the most recent message.</p>"},{"location":"gui/Logger/#parameters_1","title":"Parameters","text":"<ul> <li><code>message</code>: The text message to be logged.</li> <li><code>message_type</code>: The type of message (INFO, ERROR, SUCCESS).</li> </ul>"},{"location":"gui/Logger/#description_1","title":"Description","text":"<ul> <li>Determines the text color based on the message type.</li> <li>Creates a label inside the scrollable frame for the message.</li> <li>Stores the message in a deque (removing the oldest message if the limit of 50 is reached).</li> <li>Scrolls to the most recent message.</li> </ul>"},{"location":"gui/Logger/#switch_logger_appearance","title":"<code>switch_logger_appearance</code>","text":"<p>Updates the text colors of log messages when the appearance mode (light/dark) changes.</p>"},{"location":"gui/Logger/#parameters_2","title":"Parameters","text":"<ul> <li><code>appearance_mode</code>: The new appearance mode (\"light\" or \"dark\").</li> </ul>"},{"location":"gui/Logger/#description_2","title":"Description","text":"<ul> <li>Updates the logger's color scheme based on the selected mode.</li> <li>Adjusts the text color of all existing log messages accordingly.</li> </ul>"},{"location":"gui/Toolbar/","title":"Toolbar","text":""},{"location":"gui/Toolbar/#overview","title":"Overview","text":"<p>The 'Toolbar' class is responsible for creating and managing a toolbar widget within a <code>tkinter</code> application. It integrates the <code>CustomToolbar</code> class for custom toolbar functionality. It is primarily used in conjunction with a <code>matplotlib</code> figure, where the toolbar interacts with the figure's canvas to provide custom controls.</p>"},{"location":"gui/Toolbar/#attributes","title":"Attributes","text":"<p>None</p>"},{"location":"gui/Toolbar/#methods","title":"Methods","text":""},{"location":"gui/Toolbar/#parameters","title":"Parameters:","text":"<ul> <li><code>parent: App</code>:  The parent application which holds the main graphical interface</li> <li><code>canvas: FigureCanvasTkAgg</code>:  The <code>matplotlib</code> canvas widget used for rendering figures within the GUI.</li> </ul>"},{"location":"gui/Toolbar/#description","title":"Description:","text":"<p>The constructor initializes the toolbar by:</p> <ol> <li>Create a <code>tk.Frame</code> to contain the toolbar</li> <li>Setting the background color depending on appearance mode</li> <li>Adding a <code>CustomToolbar</code>instance to the Frame, which provides the functionality</li> <li>Calling the <code>update()</code> method on the <code>CustomToolbar</code> instance to refresh the toolbar</li> </ol>"},{"location":"gui/Toolbar/#description_1","title":"Description:","text":"<p>The constructor customizes the toolbar by:</p> <ol> <li>Calling the parent class constructor (<code>NavigationToolbar2Tk</code>) to initialize the default toolbar functionality.</li> <li>Customizing the message label's appearance, including background and foreground colors and font settings, based on the parent application's color scheme.</li> <li>Iterating over the toolbar's items (buttons) and modifying their appearance. This includes changing the background color of each button to green, setting a flat relief style, and disabling the highlight thickness.</li> <li>Removing unnecessary buttons from the toolbar by destroying specific child widgets that are not needed for the application.</li> </ol>"},{"location":"gui/Toolbar/#type-checking","title":"Type Checking","text":"<p>The following import is used to ensure that type checking is correctly enforced:</p> <pre><code>from typing import TYPE_CHECKING\nif TYPE_CHECKING:\n    from napytau.gui.app import App\n</code></pre> <p>This ensures that type annotations in the Toolbar and CustomToolbar classes reference the App class correctly without causing circular imports during runtime.</p>"},{"location":"gui/model/Color/","title":"Color","text":"<p>An enumeration of hex codes which represent certain colors used in the Napytau design.</p> Color Name Hex Value <code>BLACK</code> <code>#000000</code> <code>DARK_GRAY</code> <code>#151515</code> <code>WHITE</code> <code>#ffffff</code> <code>DARK_GREEN</code> <code>#009d00</code> <code>LIGHT_GREEN</code> <code>#2eff2a</code> <code>DARK_RED</code> <code>#900000</code> <code>LIGHT_RED</code> <code>#ff001b</code> Logger Colors <code>LIGHT_MODE_INFO_COLOR</code> <code>black</code> <code>LIGHT_MODE_ERROR_COLOR</code> <code>#ba1500</code> <code>LIGHT_MODE_SUCCESS_COLOR</code> <code>#388f00</code> <code>DARK_MODE_INFO_COLOR</code> <code>white</code> <code>DARK_MODE_ERROR_COLOR</code> <code>#ff3a21</code> <code>DARK_MODE_SUCCESS_COLOR</code> <code>#48ba00</code>"},{"location":"gui/model/CustomToolbar/","title":"Custom Toolbar","text":""},{"location":"gui/model/CustomToolbar/#overview","title":"Overview","text":"<p>The original Toolbar module, provided by <code>customtkinter</code>, is not appropriate  for napytau which is why we created our own custom Toolbar.</p> <p>This Toolbar takes the original module from <code>customtkinter</code> and slightly adjusts it to fit our needs.</p>"},{"location":"gui/model/CustomToolbar/#initialization","title":"Initialization","text":"<p>Initializes the CustomToolbar object, by first creating an original customtkinter toolbar and then setting it's color and font parameters.</p> <p>After that certain buttons in the Toolbar are customized and buttons present in the original toolbar, not needed for napytau, are removed.</p>"},{"location":"gui/model/CustomToolbar/#attributes","title":"Attributes","text":"<p>None</p>"},{"location":"gui/model/CustomToolbar/#methods","title":"Methods","text":""},{"location":"gui/model/CustomToolbar/#__init__self-canvas-figurecanvastkagg-window-frame-parent-app-none","title":"<code>__init__(self, canvas: FigureCanvasTkAgg, window: Frame, parent: \"App\") -&gt; None</code>","text":""},{"location":"gui/model/CustomToolbar/#parameter","title":"Parameter:","text":"<ul> <li><code>canvas: FigureCanvasTkAgg</code>:   The <code>matplotlib</code> canvas widget used for rendering figures within the GUI.</li> <li><code>window: Frame</code>: The parent frame in which the Toolbar is placed</li> <li><code>parent: App</code>: The main application window</li> </ul>"},{"location":"gui/model/CustomToolbar/#type-checking","title":"Type Checking","text":"<p>The following import is used to ensure that type checking is correctly enforced:</p> <pre><code>from typing import TYPE_CHECKING\nif TYPE_CHECKING:\n    from napytau.gui.app import App\n</code></pre> <p>This ensures that type annotations in the Toolbar and CustomToolbar classes reference the App class correctly without causing circular imports during runtime.</p>"},{"location":"gui/model/LogMessageType/","title":"Log Message Type","text":"<p>Provides Typing for Messages used by <code>Logger</code>. </p> Type Name Discription <code>INFO</code> Contains information useful to the user <code>ERROR</code> Contains information about an error that has occured <code>SUCCESS</code> Contains information about a successful command"},{"location":"gui/model/MarkerFactory/","title":"Marker Factory","text":""},{"location":"gui/model/MarkerFactory/#overview","title":"Overview","text":"<p>This module contains methods for generating error markers for <code>matplotlib</code>.</p>"},{"location":"gui/model/MarkerFactory/#methods","title":"Methods","text":""},{"location":"gui/model/MarkerFactory/#generate_error_marker_patherror_amount-float-path","title":"<code>generate_error_marker_path(error_amount: float) -&gt; Path</code>","text":"<p>Generates error marker paths to be used by the Graph Component to represent error magnitudes</p>"},{"location":"gui/model/MarkerFactory/#parameters","title":"Parameters:","text":"<ul> <li><code>error_amount</code> (float): The magnitude of the error, which determines the size of the marker.</li> </ul>"},{"location":"gui/model/MarkerFactory/#returns","title":"Returns:","text":"<ul> <li><code>Path</code>: A matplotlib <code>Path</code> object that provides the general shape of the error marker.</li> </ul>"}]}